#!/usr/bin/env python
import os, json, pickle
from casm.project import Project, write_eci
import casm.learn
import argparse
import deap.tools
  

if __name__ == "__main__":
  
  parser = argparse.ArgumentParser(description = 'Fit cluster expansion coefficients (ECI)')
  parser.add_argument('-s', '--settings', nargs=1, help='Settings input filename', type=str)
  parser.add_argument('--format', help='Hall of fame print format. Options are "details", "json", or "csv".', type=str, default=None)
  parser.add_argument('--path', help='Path to CASM project. Default assumes the current directory is in the CASM project.', type=str, default=os.getcwd())
  parser.add_argument('--settings-format', help='Print input file description', action="store_true")
  parser.add_argument('--exLasso', help='Print example input file using Lasso', action="store_true")
  parser.add_argument('--exLassoCV', help='Print example input file using LassoCV', action="store_true")
  parser.add_argument('--exRFE', help='Print example input file using Recursive Feature Elimination (RFE)', action="store_true")
  parser.add_argument('--exGeneticAlgorithm', help='Print example input file using GeneticAlgorithm', action="store_true")
  parser.add_argument('--exIndividualBestFirst', help='Print example input file using IndividualBestFirst', action="store_true")
  parser.add_argument('--exPopulationBestFirst', help='Print example input file using PopulationBestFirst', action="store_true")
  parser.add_argument('--hall', help='Print hall of fame summary', action="store_true")
  parser.add_argument('--indiv', nargs='+', help='Print individual summary. Expects index of individual in hall of fame', type=int)
  parser.add_argument('--select', nargs=1, help='Select individual to use', type=int)
  parser.add_argument('-v','--verbose', help='Verbose print', action="store_true", default=False)
  args = parser.parse_args()
  
  if args.settings_format:
    casm.learn.print_input_help()
    exit()
  
  if args.exLasso:
    print json.dumps(casm.learn.example_input_Lasso(), indent=2)
    exit()
  elif args.exLassoCV:
    print json.dumps(casm.learn.example_input_LassoCV(), indent=2)
    exit()
  elif args.exRFE:
    print json.dumps(casm.learn.example_input_RFE(), indent=2)
    exit()
  elif args.exGeneticAlgorithm:
    print json.dumps(casm.learn.example_input_GeneticAlgorithm(), indent=2)
    exit()
  elif args.exIndividualBestFirst:
    print json.dumps(casm.learn.example_input_IndividualBestFirst(), indent=2)
    exit()
  elif args.exPopulationBestFirst:
    print json.dumps(casm.learn.example_input_PopulationBestFirst(), indent=2)
    exit()
  
  if args.settings:
    
    if args.verbose:
      print "Loading", args.settings[0]
    
    with open(args.settings[0], 'r') as f:
      try:
        input = json.load(f)
      except Exception as e:
        print "Error parsing JSON in", args.settings[0]
        raise e
    
    if args.hall or args.indiv:
      
      halloffame_filename = input.get("halloffame_filename", "halloffame.pkl")
      # print Hall of Fame summary
      if args.verbose:
        print "Loading Hall of Fame:", halloffame_filename
      existing_hall = casm.learn.open_halloffame(halloffame_filename, args.verbose)
      
      if args.hall:
        casm.learn.print_halloffame(existing_hall, format=args.format)
      elif args.indiv:
        casm.learn.print_individual(existing_hall, args.indiv, format=args.format)
  
    elif args.select:
      
      halloffame_filename = input.get("halloffame_filename", "halloffame.pkl")
      # print Hall of Fame summary
      existing_hall = casm.learn.open_halloffame(halloffame_filename, args.verbose)
      
      if "data" not in input:
        input["data"] = dict()
      if "kwargs" not in input["data"] or input["data"]["kwargs"] is None:
        input["data"]["kwargs"] = dict()
      proj = Project(input["data"]["kwargs"].get("project_path", None))
      
      index = args.select[0]
      indiv = existing_hall[index]
      
      write_eci(proj, indiv.eci, casm.learn.to_json(index, indiv), verbose=args.verbose)
      
    else:
      # run fitting
      
      # construct hall of fame
      halloffame_filename = input.get("halloffame_filename", "halloffame.pkl")
      halloffame_size = input.get("halloffame_size", 25)
      hall = deap.tools.HallOfFame(halloffame_size)
      if args.verbose:
        print "# Hall of Fame size:", halloffame_size, "\n"
      
      if os.path.exists(halloffame_filename):
        existing_hall = casm.learn.open_halloffame(halloffame_filename, args.verbose)
        hall.update(existing_hall)
    
      casm.learn.fit_and_select(input, verbose=args.verbose, hall=hall)
      
      # pickle hall of fame
      casm.learn.save_halloffame(hall, halloffame_filename, args.verbose)
      
  else:
    
    print \
    """
    Learning is performed in four steps:
    
    1) Select training data.
      Create a selection of configurations to include in the regression problem.
    
    2) Select scoring metric.
      Add sample weights to configurations if desired and select a cross validation
      method.
    
    3) Select estimator.
      Choose how to solve for ECI from calculated property and correlations. For
      instance: LinearRegression, Lasso, or Ridge regression.
    
    4) Select features.
      Select which basis functions to include in the cluster expansion. For instance,
      SelectFromModel along with a l-1 norm minimizing estimator. Or GeneticAlgorithm.
    """
    
    parser.print_help()



