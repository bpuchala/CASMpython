#!/usr/bin/env python

from casm.project import Project, Selection
import casm.plotting
import argparse
import os
import sys
import json
from bokeh.io import curdoc
from bokeh.client import push_session

input_help = "Input file"
desc_help = "Print extended usage description"
usage_desc = """
Plot the convex hull of calculated formation energies

Before running you must start the bokeh server:
- install bokeh with: 'pip install bokeh'
- start server: 'bokeh serve'

Hovering over data points will show:
- configuration name
- Ef / Ef_per_atom
- hull_dist / hull_dist_per_atom
- comp / comp_n / atom_frac

If you have 'casm view' setup, then clicking on a configuration in the plot
will attempt to use 'casm view' to view that configuration.

You can edit visual attributes using --dft_style and --clex_style. The default
values will be printed to files "dft_style.json" and "clex_style.json" if not 
specified.

Input file attributes:

  figure_kwargs: JSON object (optional)
    Input arguments for bokeh.models.Figure
  
  series: JSON array of one JSON object
    An array with one JSON object:

    project: str (optional, default=os.getcwd())
      Path to CASM project to get data from
    
    selection: str (optional, default="MASTER")
      Path to selection to use
    
    x: str
      Query to use for x-values. Should be one of 'comp(x)', 'comp_n(X)', or
      'atom_frac(X)'.
    
    y: str
      Query to use for y-values. Should be one of 'formation_energy' or 
      'formation_energy_per_atom'.
    
    tooltips: JSON array of str (optional, default=[])
      Additional properties to query and include in 'tooltips' info that appears
      when hovering over a data point.
    
    tooltips_exlude: JSON array of str (optional, default=[])
      Properties to exclude from the 'tooltips'.
    
    dft_style: JSON object (optional, default=casm.plotting.dft_hull_style({})
      Visual styling attribute values for calculated energies. Defaults are 
      determined casm.plotting.dft_hull_style. The 'marker' value should be one 
      of the methods of bokeh.models.Figure
    
    clex_style: JSON object (optional, default=casm.plotting.dft_hull_style({})
      Visual styling attribute values for predicted energies. Defaults are 
      determined casm.plotting.clex_hull_style. The 'marker' value should be one 
      of the methods of bokeh.models.Figure
    

Example input file:

{
  "figure_kwargs": {
    "plot_height": 400,
    "plot_width": 800,
    "tools": "crosshair,pan,reset,resize,box_zoom"
  },
  "series": [
    {
      "project": null,
      "selection": "MASTER",
      "hull_selection":"MASTER",
      "x": "comp(a)",
      "y": "formation_energy",
      "tooltips": [
        "scel_size"
      ],
      "tooltips_exclude": [
        "project",
        "selection"
      ]
    }
  ]
}

'dft_style' example:

{
  "hull_line_dash": "", 
  "hover_alpha": 0.7, 
  "fill_alpha": 0.5, 
  "selected": {
    "color": "red", 
    "radii": 10
  }, 
  "hull_line_width": 1.0, 
  "on_hull": {
    "line_color": "red", 
    "line_width": 2.0, 
    "line_alpha": 0.8
  }, 
  "marker": "circle", 
  "hover_color": "orange", 
  "unselected": {
    "color": "gray", 
    "radii": 7
  }, 
  "off_hull": {
    "line_color": "blue", 
    "line_width": 0.0, 
    "line_alpha": 0.0
  }
}

'clex_style' has one additional property: 
  'clex_of_dft_hull_line_dash': "4 4"

"""

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description = 'Plot convex hull')
    parser.add_argument('--desc', help=desc_help, default=False, action="store_true")
    parser.add_argument('input', help=input_help, type=str)
    
    # ignore 'mc casm'
    args = parser.parse_args(sys.argv[1:])
    
    if args.desc:
        print usage_desc
        sys.exit(1)
    
    with open(args.input, 'r') as f:
        input = json.load(f)
    
    data = casm.plotting.PlottingData()
    
    for i, series in enumerate(input['series']):
    
        proj = data.project(series.get('project',os.getcwd()))
        
        prim = proj.prim
        if prim.n_independent_compositions != 1:
            print "error: currently plot.hull only works for binary alloys"
            print "in project:", proj.path
            print "n_independent_compositions:", prim.n_independent_compositions
            sys.exit(1)
        
        selection = data.selection(proj.path, series.get('selection','MASTER'), kwargs={"all":series.get('all', True)})
        hull_selection = data.selection(proj.path, series.get('hull_selection','MASTER'))
        
        dft_style = casm.plotting.dft_hull_style(series.get('dft_style', dict()))
        clex_style = casm.plotting.clex_hull_style(series.get('clex_style', dict()))
        
        hullplot = casm.plotting.ConvexHullPlot(selection, hull_selection, x=series['x'],
            y=series['y'], dft_style=dft_style, clex_style=clex_style, data=data,
            tooltips=series.get('tooltips',[]), tooltips_exclude=series.get('tooltips_exclude',[]))
    
    # set up session
    session = push_session(curdoc())
    curdoc().add_root(hullplot.layout)
    session.show() # open the document in a browser
    session.loop_until_closed() # run forever

